scalar Void

enum MetaKey {
  title
  type
  collection
  description
  material
  height
  width
  depth
  unMapped
  object_number
  object_name
  QRCode
  fullname
  firstname
  lastname
  nationality
  scopeNote
}

enum RelationType {
  authoredBy
  isIn
  contains
  isTypeOf
  isUsedIn
  components
  parent
  carriedOutBy
  visited
  inBasket
  frames
}

enum ComponentType {
  frame
  audio
}

enum JSPatchOp {
  add
  replace
  remove
}

input JSPatch {
  op: JSPatchOp!
  path: [String!]!
  value: String!
}

input StoryInput {
  key: String!
  active: Boolean!
  last_frame: String
}

input FrameInput {
  storyId: String!
  frameId: String!
}

type FrameSeen {
  id: String!
  date: String!  
}

type Metadata {
  key: MetaKey!
  value: String
  nestedMetaData: Entity
  lang: String
  unMappedKey: String
  label: String
  type: RelationType
}

input MetadataInput {
  key: MetaKey!
  value: String!
  lang: String
}

type MetadataCollection {
  label: String!
  data: [Metadata]
  nested: Boolean
}

type Entity {
  _key: String
  id: String!
  object_id: String!
  type: String!
  metadata(key: [MetaKey]): [Metadata]!
  metadataByLabel(key: [String]): [Metadata]!
  metadataCollection(key: [MetaKey], label: [String]): [MetadataCollection]
  title: [Metadata]!
  scopeNote: [Metadata]!
  collections: [Metadata]!
  relations: [Relation]
  relationMetadata: [Relation]
  components: [Entity]
  componentsOfType(key: String): [Entity]
  assets: [Entity]
  frames: [Entity]
  mediafiles: [MediaFile]
  primary_mediafile: String
  primary_mediafile_info: MediaInfo
  primary_mediafile_location: String
}

type MediaInfo {
  width: String!
  height: String!
}

type MediaFileMetadata {
  key: String
  value: String
}

type MediaFile {
  _id: String!
  original_file_location: String
  thumbnail_file_location: String
  filename: String
  entities: [String]
  mediainfo: MediaInfo
  metadata: [MediaFileMetadata]
}

type Position {
  x: Float
  y: Float
  z: Float
}

type Relation {
  key: String!
  type: RelationType!
  label: String
  value: String
  timestamp_start: Float
  timestamp_end: Float
  timestamp_zoom: Float
  position: Position
  scale: Float
  audioFile: String
  subtitleFile: String
  date: String
  active: Boolean
  last_frame: String
  seen_frames: [FrameSeen]
  order: Int
}

type EntitiesResults {
  results: [Entity]
  relations: [Relation]
  count: Int
  limit: Int
}

type BoxVisitersResults {
  results: [BoxVisiter]
  relations: [Relation]
  count: Int
  limit: Int
}

type RelationsResults {
  results: [Relation]
  count: Int
  limit: Int
}

input SearchFilter {
  value: String
  isAsc: Boolean
  key: String
  relation_filter: [String]
  randomize: Boolean
  seed: String
  has_mediafile: Boolean
  skip_relations: Boolean
}

type User {
  id: String!
  email: String!
  family_name: String!
  given_name: String!
  name: String!
  preferred_username: String!
}

type BoxVisiter {
  _key: String
  id: String!
  type: String!
  relations: [Relation]
  relationByType(type: RelationType!): [Relation]
  frames_seen_last_visit: Int
  code: String!
  start_time: String
  touch_table_time: String
}

type Query {
  ActiveBox: [Relation]!
  BoxVisiters: BoxVisitersResults
  BoxVisiterByCode(code: String!):BoxVisiter
  BoxVisiterRelationsByType(code: String!, type: RelationType!):[Relation]
  CreateBoxVisiter(storyId: String!):BoxVisiter
  Stories: EntitiesResults
  Entity(id: String!): Entity
  Entities(
    limit: Int
    skip: Int
    searchValue: SearchFilter!
    fetchPolicy: String
    randomization: Boolean
    seed: String
  ): EntitiesResults
  Relations(searchValue: SearchFilter!, fetchPolicy: String): RelationsResults
  User: User
}

type Mutation {
  replaceMetadata(id: String!, metadata: [MetadataInput!]!): [Metadata!]!
  AddStoryToBoxVisiter(code: String!, story: StoryInput!): BoxVisiter!
  AddFrameToStoryBoxVisiter(code: String!, frameInput: FrameInput!): BoxVisiter!
  AddAssetToBoxVisiter(code: String!, assetId: String!, type: RelationType!): [Relation]!
}
