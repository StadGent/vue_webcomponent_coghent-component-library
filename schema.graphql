scalar Void
scalar Upload

enum UploadStatus {
  creating
  uploaded
  verified
  denied
  waiting
}

enum Rights {
  cc0
  undetermined
}

enum Publication {
  public
  private
  validate
}

enum MIME {
  AUDIOMPEG
  AUDIOMP3
  AUDIOAAC
  AUDIOOGG
  AUDIOOPUS
  AUDIOWAV
  AUDIOXWAV
  IMGJPG
  IMGJPEG
  IMGTIFF
  IMGPNG
  IMGAVIF
  IMGBMP
  IMGWEBP
  VIDEOMP4
  VIDEOWAV
  VIDEOMOV
  TEXTPLAIN
  APPLICATIONPDF
}

enum MetaKey {
  title
  type
  collection
  description
  material
  height
  width
  depth
  unMapped
  object_number
  object_name
  QRCode
  fullname
  firstname
  lastname
  nationality
  scopeNote
  boxCode
  status
  likes
  date
}

extend enum MetaKey {
  periode
  maker
}

extend enum MetaKey {
  publication_status
  rights
}

enum EntityTypes {
  frame
  story
  box_visit
  contains
  asset
  thesaurus
  person
  testimony
}

enum RelationType {
  authoredBy
  isIn
  contains
  isTypeOf
  isUsedIn
  components
  parent
  carriedOutBy
  stories
  visited
  inBasket
  frames
  box_stories
  box
  story_box
  userConnected
  isTestimonyFor
  hasTestimony
}

enum StatusKey {
  hidden
  shown
}

enum ComponentType {
  frame
  audio
}

enum JSPatchOp {
  add
  replace
  remove
}

input JSPatch {
  op: JSPatchOp!
  path: [String!]!
  value: String!
}

input FrameInput {
  storyId: String!
  frameId: String!
}

input StoryInput {
  id: String
  last_frame: String
  total_frames: Int
}

input RelationInput {
  key: String!
  type: RelationType!
}

type Story {
  key: String!
  active: Boolean
  last_frame: String
  total_frames: Int
}

type FrameSeen {
  id: String!
  date: Int!
}

type Metadata {
  key: MetaKey!
  value: String
  nestedMetaData: Entity
  lang: String
  unMappedKey: String
  label: String
  type: RelationType
}

input MetadataInput {
  key: MetaKey!
  value: String!
  lang: String
  label: String
}

type MetadataCollection {
  label: String!
  data: [Metadata]
  nested: Boolean
}

type Entity {
  _key: String
  id: String!
  object_id: String!
  type: String!
  metadata(key: [MetaKey]): [Metadata]!
  metadataByLabel(key: [String]): [Metadata]!
  metadataCollection(key: [MetaKey], label: [String]): [MetadataCollection]
  title: [Metadata]!
  publicationStatus: [Metadata]
  scopeNote: [Metadata]!
  collections: [Relation]!
  relations: [Relation]
  relationMetadata: [Relation]
  components: [Entity]
  componentsOfType(key: String): [Entity]
  assets: [Entity]
  frames: [Entity]
  mediafiles: [MediaFile]
  nonPublicMediafiles: [MediaFile]
  primary_mediafile: String
  primary_transcode: String
  primary_transcode_location: String
  primary_mediafile_info: MediaInfo
  primary_mediafile_location: String
  primary_width: String
  primary_height: String
  testimonies: [Entity]
  user: String
}

type MediaInfo {
  width: String!
  height: String!
}

type MediaFileMetadata {
  key: String
  value: String
}

type MimeType {
  type: String
  mime: MIME
  audio: Boolean
  video: Boolean
  image: Boolean
  pdf: Boolean
}

type MediaFile {
  _id: String!
  original_file_location: String
  thumbnail_file_location: String
  filename: String
  transcode_filename: String
  primary_transcode_location: String
  entities: [String]
  mediainfo: MediaInfo
  metadata: [MediaFileMetadata]
  mediatype: MimeType
  mimetype: String
  img_width: String
  img_height: String
}

type Position {
  x: Float
  y: Float
  z: Float
}

type Relation {
  key: String!
  type: RelationType!
  order: Int
  label: String
  value: String
  timestamp_start: Float
  timestamp_end: Float
  timestamp_zoom: Float
  position: Position
  scale: Float
  audioFile: String
  subtitleFile: String
  date: String
  active: Boolean
  last_frame: String
  seen_frames: [FrameSeen]
  total_frames: Int
  setMediafile: Int
}

input EntityInfo {
  type: EntityTypes!
  title: String!
  description: String!
}

type EntitiesResults {
  results: [Entity]
  relations: [Relation]
  count: Int
  limit: Int
}

type MediafilesResults {
  results: [MediaFile]
  relations: [Relation]
  count: Int
  limit: Int
}

type BoxVisitersResults {
  results: [BoxVisiter]
  relations: [Relation]
  count: Int
  limit: Int
}

type RelationsResults {
  results: [Relation]
  count: Int
  limit: Int
}

input SearchFilter {
  value: String
  isAsc: Boolean
  key: String
  relation_filter: [String]
  randomize: Boolean
  seed: String
  has_mediafile: Boolean
  skip_relations: Boolean
  and_filter: Boolean
}

input TextInput {
  value: String
}

input MultiSelectInput {
  value: [String]
  AndOrValue: Boolean
}

enum AdvancedInputType {
  TextInput
  MultiSelectInput
}

input FilterInput {
  key: String!
  type: AdvancedInputType!
  textInput: TextInput
  multiSelectInput: MultiSelectInput
}

type User {
  id: String!
  email: String!
  family_name: String!
  given_name: String!
  name: String!
  preferred_username: String!
}

type BoxVisiter {
  _key: String
  id: String!
  type: String!
  relations: [Relation]
  relationByType(type: RelationType!): [Relation]
  frames_seen_last_visit: Int
  code: String!
  start_time: String
  touch_table_time: String
  ticketUsed: Int
  storyboxes: [Entity]
}

type Ticket {
  code: String!
  body: String!
}

input KeyValuePairInput {
  key: String
  value: String
}
type KeyValuePair {
  key: String
  value: String
}

input StoryboxBuildInput {
  frameId: String
  title: String
  language: String
  description: String
  assets: [String]
  assetTimings: [KeyValuePairInput]
}
type StoryboxBuild {
  frameId: String!
  title: String
  language: String
  description: String
  assets: [Entity]!
  assetTimings: [KeyValuePair]!
}

input MediaFileInput {
  filename: String
  metadata: [MetadataInput!]
}

type UploadComposable {
  file_location: String
  base64Image: String
  metadata(key: [MetaKey]): [Metadata]
  relations: [Relation]
  liscense: Rights
}

type Query {
  PrintBoxTicket(code: String!): Ticket!
  ActiveBox(id: String): EntitiesResults!
  BoxVisiters: BoxVisitersResults
  BoxVisiterByCode(code: String!): BoxVisiter
  BoxVisiterRelationsByType(code: String!, type: RelationType!): [Relation]
  CreateBoxVisiter(storyId: String!): BoxVisiter
  Stories: EntitiesResults
  CreateEntity(entityInfo: EntityInfo!): Entity
  Entity(id: String!): Entity
  GetStoryById(id: String!): Entity
  Entities(
    limit: Int
    skip: Int
    searchValue: SearchFilter!
    fetchPolicy: String
    randomization: Boolean
    seed: String
    and_filter: Boolean
  ): EntitiesResults
  Relations(searchValue: SearchFilter!, fetchPolicy: String): RelationsResults
  User: User
  StoryBox: Entity
  RelationsAsEntities(id: String!): [Entity]
  LinkStorybox(code: String!): Entity
  CreateStorybox(storyboxInfo: StoryboxBuildInput!): Entity
  Storybox: EntitiesResults
  AddEntityAsRelation(entityId: String!, entityRelationId: String!): [Relation]
  LinkFrameToVisiter(frameId: String!): BoxVisiter
  GetvisiterOfEntity(id: String!): BoxVisiter
  GetUploadRelations(searchValue: String!): EntitiesResults
  LinktestimonyToAsset(assetId: String!, testimonyId: String!): [Relation]
  BasketByCustomFrameId(frameId: String!): [Relation]
  GetMyUploadedAssets: EntitiesResults
  UploadObjectFromEntity(entityId: String!): UploadComposable
  GetTestimoniesOfUser: [Entity]
}

type Mutation {
  replaceMetadata(id: String!, metadata: [MetadataInput!]!): [Metadata!]!
  AddStoryToBoxVisiter(code: String!, storyId: String!): BoxVisiter
  AddFrameToStoryBoxVisiter(code: String!, frameInput: FrameInput!): BoxVisiter
  DeleteBoxVisiterBasketItem(code: String!, relationId: String!): [Relation]!
  AddTouchTableTime(_code: String!): BoxVisiter
  AddAssetToBoxVisiter(
    code: String!
    assetId: String!
    type: RelationType!
  ): [Relation]!
  DeleteEntity(id: String!): String
  UpdatedScannedOfBoxvisiter(code: String!): BoxVisiter
  UploadMediafile(
    media: MediaFileInput!
    file: Upload
    relations: [RelationInput]
    metadata: [MetadataInput]
  ): MediaFile
  UpdateEntity(
    id: String!
    metadata: [MetadataInput]!
    relations: [RelationInput]!
  ): Entity
  CreateTestimony(entityInfo: EntityInfo!, assetId: String!): Entity
}
