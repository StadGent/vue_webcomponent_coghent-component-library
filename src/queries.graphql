fragment minimalEntity on Entity {
  id
  type
  mediafiles {
    location: original_file_location
  }
}

fragment fullEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  metadata(key: [material, type, collection]) {
    key
    value
  }
  mediafiles {
    _id
    original_file_location
  }
  relations {
    key
    type
    label
  }
}

fragment storyEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  metadata(key: [description,collection]) {
    key
    value
  }
  mediafiles {
    original_file_location
  }
}

fragment fullUser on User {
  id
  email
  family_name
  given_name
  name
  preferred_username
}

fragment fullRelation on Relation {
  key
  type
  label
}

fragment relationMetadata on Relation {
  key
  label
  timestamp_start
  timestamp_end
  position{
    x
    y
    z
  }
  scale
}

query getEntities($limit: Int, $skip: Int, $searchValue: SearchFilter!) {
  Entities(limit: $limit, skip: $skip, searchValue: $searchValue) {
    count
    limit
    results {
      ...fullEntity
    }
    relations {
      ...fullRelation
    }
  }
}

query getFullEntities(
  $limit: Int
  $skip: Int
  $searchValue: SearchFilter!
  $fetchPolicy: String
) {
  Entities(
    limit: $limit
    skip: $skip
    searchValue: $searchValue
    fetchPolicy: $fetchPolicy
  ) {
    count
    limit
    results {
      ...fullEntity
    }
  }
}

query getEntityById($id: String!) {
  Entity(id: $id) {
    ...fullEntity
  }
}

query getMe {
  User {
    ...fullUser
  }
}

query getRelations($searchValue: SearchFilter!) {
  Relations(searchValue: $searchValue) {
    count
    limit
    results {
      ...fullRelation
    }
  }
}

query getStories($limit: Int, $skip: Int, $searchValue: SearchFilter!) {
	Entities(limit: $limit, skip: $skip, searchValue: $searchValue) {
		count
		limit
		results {
			...storyEntity
			frames {
        ...storyEntity
        relationMetadata {
					...relationMetadata
				}
				assets {
					...storyEntity
          collections: metadata(key: [collection]) {
						key
						value
					}
					dimensions: metadata(key: [diameter, hoogte]) {
						key
						value
					}        
				}
			}
		}
	}
}

query getEnumsByName($enumName: String!) {
  __type(name: $enumName) {
    name
    enumValues {
      name
    }
  }
}