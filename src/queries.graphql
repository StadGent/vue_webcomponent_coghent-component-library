fragment minimalEntity on Entity {
  id
  object_id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  primary_mediafile
  primary_transcode
  primary_mediafile_info {
    width
    height
  }
  mediafiles {
    mediatype {
      type
      mime
      image
      audio
      video
      pdf
    }
  }
}

fragment touchTableEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  ...primaryMediafileInfo
  mediafiles {
    filename
    original_file_location
    transcode_filename
    mimetype
    mediatype {
      type
      mime
      image
      audio
      video
      pdf
    }
  }
  relations {
    key
    type
    label
    value
  }
}

fragment fullBoxVisiter on BoxVisiter {
  id
  type
  code
  frames_seen_last_visit
  start_time
  touch_table_time
  relations {
    ...boxRelation
  }
}

fragment fullStory on Entity {
  ...storyEntity
  relationMetadata {
    key
    audioFile
    subtitleFile
  }
  frames {
    ...storyEntity
    relationMetadata {
      ...assetMetadata
    }
    assets {
      ...storyEntity
      collections {
        key
        value
      }
    }
  }
}

fragment MetadataCollectionFields on MetadataCollection {
  label
  nested
  data {
    value
    unMappedKey
    label
    nestedMetaData {
      ...NestedEntity
      metadataCollection(
        key: [title, description, object_number, scopeNote]
        label: ["objectnummer"]
      ) {
        label
        nested
        data {
          value
          unMappedKey
          label
          nestedMetaData {
            ...nestedEndEntity
          }
        }
      }
    }
  }
}

fragment NestedEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  objectNumber: metadata(key: [object_number]) {
    key
    value
  }
  mediafiles {
    _id
    original_file_location
    transcode_filename
    filename
    mimetype
    mediatype {
      type
      mime
      image
      audio
      video
      pdf
    }
  }
  relations {
    key
    type
    label
    value
  }
}

fragment nestedEndEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  objectNumber: metadata(key: [object_number]) {
    key
    value
  }
  metadataCollection(
    key: [title, description, object_number, scopeNote]
    label: ["objectnummer"]
  ) {
    label
    nested
    data {
      value
      unMappedKey
      label
    }
  }
  mediafiles {
    _id
    original_file_location
    transcode_filename
    filename
    mimetype
    mediatype {
      type
      mime
      image
      audio
      video
      pdf
    }
  }
  relations {
    key
    type
    label
    value
  }
}

fragment fullEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  scopeNote: metadata(key: [scopeNote]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  objectNumber: metadata(key: [object_number]) {
    key
    value
  }
  metadataCollection(
    key: [title, description, object_number, scopeNote]
    label: []
  ) {
    ...MetadataCollectionFields
  }
  primary_mediafile
  primary_transcode
  mediafiles {
    _id
    original_file_location
    transcode_filename
    thumbnail_file_location
    mimetype
    mediatype {
      type
      mime
      image
      audio
      video
      pdf
    }
    filename
    metadata {
      key
      value
    }
  }
  relations {
    key
    type
    label
    value
  }
}

fragment creator on Entity {
  type
  metadata(key: [fullname, firstname, lastname, nationality]) {
    key
    value
  }
  relations {
    key
    type
    label
  }
}

fragment primaryMediafileInfo on Entity {
  primary_width
  primary_height
  primary_mediafile
  primary_transcode
  primary_mediafile_location
}

fragment storyEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  metadata(key: [description, collection]) {
    key
    value
  }
  mediafiles {
    original_file_location
    filename
    mimetype
    transcode_filename
    mediainfo {
      width
      height
    }
    mediatype {
      type
      mime
      image
      audio
      video
      pdf
    }
  }
  ...primaryMediafileInfo
}

fragment fullUser on User {
  id
  email
  family_name
  given_name
  name
  preferred_username
}

fragment fullRelation on Relation {
  key
  type
  label
  value
  order
}

fragment boxRelation on Relation {
  key
  type
  active
  order
  last_frame
  total_frames
  seen_frames {
    id
    date
  }
}

fragment assetMetadata on Relation {
  key
  label
  timestamp_start
  timestamp_end
  timestamp_zoom
  position {
    x
    y
    z
  }
  scale
  audioFile
  subtitleFile
}

query getEntities($limit: Int, $skip: Int, $searchValue: SearchFilter!) {
  Entities(limit: $limit, skip: $skip, searchValue: $searchValue) {
    count
    limit
    results {
      ...minimalEntity
    }
    relations {
      ...fullRelation
    }
  }
}

query getFullEntities(
  $limit: Int
  $skip: Int
  $searchValue: SearchFilter!
  $fetchPolicy: String
) {
  Entities(
    limit: $limit
    skip: $skip
    searchValue: $searchValue
    fetchPolicy: $fetchPolicy
  ) {
    count
    limit
    results {
      ...fullEntity
    }
  }
}

query getEntityById($id: String!) {
  Entity(id: $id) {
    ...fullEntity
  }
}

query getTouchTableEntityById($id: String!) {
  Entity(id: $id) {
    ...touchTableEntity
  }
}

query getCreatorById($id: String!) {
  Entity(id: $id) {
    ...creator
  }
}

query getMe {
  User {
    ...fullUser
  }
}

query getRelations($searchValue: SearchFilter!) {
  Relations(searchValue: $searchValue) {
    count
    limit
    results {
      ...fullRelation
    }
  }
}

query getStories {
  Stories {
    count
    limit
    results {
      ...fullStory
    }
  }
}

query getStoryById($id: String!) {
  Entity(id: $id) {
    ...fullStory
  }
}

query getEnumsByName($enumName: String!) {
  __type(name: $enumName) {
    name
    enumValues {
      name
    }
  }
}

query getActiveBox {
  ActiveBox {
    count
    limit
    results {
      ...fullStory
    }
  }
}

query getBoxVisiters {
  BoxVisiters {
    results {
      ...fullBoxVisiter
    }
    count
    limit
  }
}

query printBoxTicket($code: String!) {
  PrintBoxTicket(code: $code) {
    code
    body
  }
}

query getBoxVisiterByCode($code: String!) {
  BoxVisiterByCode(code: $code) {
    ...fullBoxVisiter
  }
}

query getBoxVisiterRelationsByType($code: String!, $type: RelationType!) {
  BoxVisiterRelationsByType(code: $code, type: $type) {
    ...boxRelation
  }
}

query createBoxVisiter($storyId: String!) {
  CreateBoxVisiter(storyId: $storyId) {
    ...fullBoxVisiter
  }
}

mutation addStoryToBoxVisiter($code: String!, $storyId: String!) {
  AddStoryToBoxVisiter(code: $code, storyId: $storyId) {
    ...fullBoxVisiter
  }
}

mutation addFrameToStoryBoxVisiter($code: String!, $frameInput: FrameInput!) {
  AddFrameToStoryBoxVisiter(code: $code, frameInput: $frameInput) {
    ...fullBoxVisiter
  }
}

mutation addAssetToBoxVisiter(
  $code: String!
  $assetId: String!
  $type: RelationType!
) {
  AddAssetToBoxVisiter(code: $code, assetId: $assetId, type: $type) {
    key
    type
    label
    order
  }
}

mutation deleteRelationFromBoxVisiter($code: String!, $relationId: String!) {
  DeleteBoxVisiterRelation(code: $code, relationId: $relationId) {
    ...fullRelation
  }
}

# mutation deleteRelationFromBoxVisiter(
#   $code: String!
#   $relationsToDelete: [RelationInput!]!
# ) {
#   DeleteBoxVisiterRelation(code: $code, relationsToDelete: $relationsToDelete) {
#     ...fullRelation
#   }
# }

mutation updateBoxVisiterTouchtableTime(
  $code: String!
  $touchTableTime: String!
) {
  UpdateBoxVisiterTouchtableTime(code: $code, touchTableTime: $touchTableTime) {
    ...fullBoxVisiter
  }
}

query getTouchTableEntity($limit: Int, $searchValue: SearchFilter!) {
  Entities(limit: $limit, searchValue: $searchValue) {
    count
    limit
    results {
      ...touchTableEntity
    }
  }
}

query RelationsAsEntities($id: String!) {
  RelationsAsEntities(id: $id) {
    ...minimalEntity
    mediafiles {
      thumbnail_file_location
    }
  }
}

query createStorybox($storyboxInfo: StoryboxBuildInput!) {
  CreateStorybox(storyboxInfo: $storyboxInfo) {
    ...minimalEntity
  }
}

query LinkStorybox($code: Int) {
  LinkStorybox(code: $code) {
    ...minimalEntity
  }
}

query storybox {
  Storybox {
    count
    results {
      id
      type
      metadata(key: [title, description]) {
        key
        value
      }
      relations {
        key
        type
        value
        timestamp_start
        timestamp_end
        timestamp_zoom
      }
    }
  }
}

query addEntityAsRelation($entityId: String!, $entityRelationId: String!){
  AddEntityAsRelation(entityId: $entityId, entityRelationId: $entityRelationId){
    key
    type
  }
}
