fragment minimalEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  primary_mediafile
}

fragment nestedEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  objectNumber: metadata(key: [object_number]) {
    key
    value
  }
  objectName: metadataByLabel(key: ["objectnaam"]) {
    value
  }
  metadataCollection(
    key: [title, description, object_number]
    label: ["objectnaam", "objectnummer"]
  ) {
    label
    nested
    data {
      value
      unMappedKey
      label
    }
  }
  mediafiles {
    _id
    original_file_location
    filename
  }
  relations {
    key
    type
    label
    value
  }
}

fragment fullEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  description: metadata(key: [description]) {
    key
    value
  }
  objectNumber: metadata(key: [object_number]) {
    key
    value
  }
  objectName: metadataByLabel(key: ["objectnaam"]) {
    value
  }
  metadataCollection(
    key: [title, description, object_number]
    label: ["objectnaam"]
  ) {
    label
    nested
    data {
      value
      unMappedKey
      label
      nestedMetaData {
        ...nestedEntity
      }
    }
  }
  mediafiles {
    _id
    original_file_location
    filename
    metadata {
      key
      value
    }
  }
  relations {
    key
    type
    label
    value
  }
}

fragment creator on Entity {
  type
  metadata(key: [fullname, firstname, lastname, nationality]) {
    key
    value
  }
  relations {
    key
    type
    label
  }
}

fragment storyEntity on Entity {
  id
  type
  title: metadata(key: [title]) {
    key
    value
  }
  metadata(key: [description, collection]) {
    key
    value
  }
  mediafiles {
    original_file_location
    filename
    mediainfo {
      width
      height
    }
  }
}

fragment fullUser on User {
  id
  email
  family_name
  given_name
  name
  preferred_username
}

fragment fullRelation on Relation {
  key
  type
  label
  value
}

fragment assetMetadata on Relation {
  key
  label
  timestamp_start
  timestamp_end
  timestamp_zoom
  position {
    x
    y
    z
  }
  scale
  audioFile
}

query getEntities($limit: Int, $skip: Int, $searchValue: SearchFilter!) {
  Entities(limit: $limit, skip: $skip, searchValue: $searchValue) {
    count
    limit
    results {
      ...minimalEntity
    }
    relations {
      ...fullRelation
    }
  }
}

query getFullEntities(
  $limit: Int
  $skip: Int
  $searchValue: SearchFilter!
  $fetchPolicy: String
) {
  Entities(
    limit: $limit
    skip: $skip
    searchValue: $searchValue
    fetchPolicy: $fetchPolicy
  ) {
    count
    limit
    results {
      ...fullEntity
    }
  }
}

query getEntityById($id: String!) {
  Entity(id: $id) {
    ...fullEntity
  }
}

query getCreatorById($id: String!) {
  Entity(id: $id) {
    ...creator
  }
}

query getMe {
  User {
    ...fullUser
  }
}

query getRelations($searchValue: SearchFilter!) {
  Relations(searchValue: $searchValue) {
    count
    limit
    results {
      ...fullRelation
    }
  }
}

query getStories {
  Stories {
    count
    limit
    results {
      ...storyEntity
      relationMetadata {
        key
        audioFile
        subtitleFile
      }
      frames {
        ...storyEntity
        relationMetadata {
          ...assetMetadata
        }
        assets {
          ...storyEntity
          relations {
            key
            audioFile
          }
          collections: metadata(key: [collection]) {
            key
            value
          }
        }
      }
    }
  }
}

query getEnumsByName($enumName: String!) {
  __type(name: $enumName) {
    name
    enumValues {
      name
    }
  }
}

query getBoxVisiters {
  BoxVisiters {
    count
    limit
    results {
      id
      type
      qrCode
    }
  }
}

query getBoxVisiterByCode($code: String!) {
  BoxVisiterByCode(code: $code) {
    id
    type
    qrCode
  }
}

mutation addFrameToVisiter($visiterId: String!, $frameId: String!) {
  AddFrameToVisiter(visiterId: $visiterId, frameId: $frameId) {
    key
    type
    date
  }
}
